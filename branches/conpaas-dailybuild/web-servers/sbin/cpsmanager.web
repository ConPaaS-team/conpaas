#!/usr/bin/python
'''
Copyright (C) 2010-2011 Contrail consortium.

This file is part of ConPaaS, an integrated runtime environment 
for elastic cloud applications.

ConPaaS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ConPaaS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ConPaaS.  If not, see <http://www.gnu.org/licenses/>.


Created on Jul 4, 2011

@author: ielhelw
'''
from os.path import exists
from conpaas.web.manager.server import DeploymentManager

if __name__ == '__main__':
  from optparse import OptionParser
  from ConfigParser import ConfigParser
  import sys
  
  parser = OptionParser()
  parser.add_option('-p', '--port', type='int', default=80, dest='port')
  parser.add_option('-b', '--bind', type='string', default='0.0.0.0', dest='address')
  parser.add_option('-c', '--config', type='string', default=None, dest='config')
  parser.add_option('-s', '--scalaris', type='string', default=None, dest='scalaris')
  options, args = parser.parse_args()
  
  if options.scalaris == None:
    print >>sys.stderr, 'Scalaris IP is required'
    sys.exit(1)
  
  if not options.config or not exists(options.config):
    print >>sys.stderr, 'Failed to find configuration file'
    sys.exit(1)
  
  config_parser = ConfigParser()
  try:
    config_parser.read(options.config)
  except:
    print >>sys.stderr, 'Failed to read configuration file'
    sys.exit(1)
  config_vars = {
    'manager': ['TYPE', 'BOOTSTRAP', 'MEMCACHE_ADDR', 'LOG_FILE',
                'ETC', 'VAR_TMP', 'VAR_CACHE', 'VAR_RUN', 'CODE_REPO',
                'FE_CREDIT_URL', 'FE_TERMINATE_URL', 'FE_SERVICE_ID'],
    'iaas': ['DRIVER'],
  }
  config_ok = True
  for section in config_vars:
    if not config_parser.has_section(section):
      print >>sys.stderr, 'Missing configuration section "%s"' % (section)
      print >>sys.stderr, 'Section "%s" should contain variables %s' % (section, str(config_vars[section]))
      config_ok = False
      continue
    for field in config_vars[section]:
      if not config_parser.has_option(section, field)\
      or config_parser.get(section, field) == '':
        print >>sys.stderr, 'Missing configuration variable "%s" in section "%s"' % (field, section)
        config_ok = False
  if not config_ok:
    sys.exit(1)
  
  print options.address, options.port
  d = DeploymentManager((options.address, options.port),
                        config_parser,
                        options.scalaris,
                        reset_config=True)
  d.serve_forever()
